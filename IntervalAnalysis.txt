Added eval functions:
eval(sigma, Device(deviceType, deviceNum)) = [0, 1]   if deviceType == 1
                                             [0, 100] if deviceType == 2
                                             [0, 9]   if deviceType == 3
eval(sigma, d.read) = sigma(d)

Added constraint rules:
d.write(E): [[v]] = JOIN(v)

d.disconnect: [[v]] = JOIN(v)

assert(X > E): [[v]] = JOIN(v)[X -> gt(JOIN (v)(X), eval(JOIN (v), E))]

    where gt([l1, l2], [h1, h2]) = bottom     if h1 > l2
                                   [h1+1, l2] else

assert(E > X): [[v]] = JOIN(v)[X -> leq(JOIN (v)(X), eval(JOIN (v), E))]

    where leq([l1, l2], [h1, h2]) = bottom     if l1 > h2
                                    [l1, h2-1] else

The analysis checks that the interval of the expression when writing to a device is contained within the interval of the
device (e.g. expression with interval [4,4] is allowed for a device with interval [0,9]).